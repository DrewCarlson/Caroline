{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Caroline","text":"<p>[WIP] This project is unfinished and not ready for use, most features described are not complete.</p> <p> </p> <p>Caroline provides privacy respecting backend services with multiplatform Kotlin SDKs.</p>"},{"location":"#services","title":"Services","text":"<p>The SDK provides the following features depending on your server deployment.</p>"},{"location":"#application","title":"Application","text":"<p>Authentication - Managed users with passwords or OAuth Providers  (Github, Google, etc.)</p> <p>Functions - Manipulate shared data based on cron or webhook triggers</p> <p>Shared data store - Store and query data with custom access rules</p> <p>Encrypted data store - Store and query data locally and sync it with e2e encryption</p> <p>Remote configuration - Distribute runtime configuration based on device attributes, percentage, etc.</p>"},{"location":"#monitoring","title":"Monitoring","text":"<p>Analytics - Track events with custom attributes</p> <p>Crash Reporting - Collect caught and fatal errors with custom data</p> <p>Logging - Stream your application logs in realtime or schedule uploads</p>"},{"location":"1-getting-started/","title":"Getting Started","text":""},{"location":"1-getting-started/#sdk","title":"SDK","text":"<pre><code>// Configure SDK\nval sdk = CarolineSdk {\nserverUrl = \"https://caroline-server\"\nprojectId = \"...\"\napiKey = \"...\"\n}\n// Logging\nval logger = CarolineLogger.create(sdk, LogSchedule.WhenBufferFull)\nlogger.logInfo(\"An event to be logged.\", mapOf(\"uid\" to \"...\"))\n</code></pre>"},{"location":"1-getting-started/#server","title":"Server","text":"<p><code>caroline-server</code> supports various deployment modes depending on your backend requirements. By default, an all-in-one mode is used exposing all services from a single central instance.</p> <p>If only some services are required, the server deployment can disable any unnecessary SDK backend components. Backend components can be deployed as individual services to scaling individual services.</p>"},{"location":"1-getting-started/#database","title":"Database","text":"<p>MongoDB provides the primary data storage. KMongo is used to interact with the database from server code.</p>"},{"location":"1-getting-started/#deploy","title":"Deploy","text":"<p>Deployment is straightforward with and without Docker, but for an all-in-one development instance, docker-compose is recommended. See the Dockerfile to understand running the server without Docker.</p> <p>For critical deployments, managed database hosting is recommended. MongoDB Atlas is a good option and provides a free development database.</p>"},{"location":"1-getting-started/#docker","title":"Docker","text":"<p>TODO: Finish this section</p> <p>If required, start a Mongo instance: </p> <p>Then start Caroline, pointing to the local Mongo instance: <pre><code>docker run -d --name caroline \\\n--env MONGO_URL=mongodb://mongodb \\\nghcr.io/drewcarlson/caroline:main\n</code></pre></p>"},{"location":"1-getting-started/#docker-compose","title":"Docker Compose","text":"<p>See docker-compose.yml for a complete example.</p> <pre><code>version: '3.1'\nservices:\nmongo:\ncontainer_name: mongo\nimage: mongo\nrestart: unless-stopped\ncaroline:\ncontainer_name: caroline\nimage: ghcr.io/drewcarlson/caroline:main\nenvironment:\nPORT: 8080\nMONGO_URL: mongodb://mongo\nrestart: unless-stopped\nports:\n- \"8080:8080\"\nlinks:\n- mongo\n</code></pre>"},{"location":"1-getting-started/#download","title":"Download","text":"<pre><code>repositories {\nmavenCentral()\n// Or snapshots\nmaven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n}\ndependencies {\n// SDK Modules\nimplementation(\"cloud.caroline:caroline-sdk-admin:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-analytics:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-auth:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-config:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-core:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-crash:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-functions:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-logging:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-store:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-sdk-store-encrypted:$CAROLINE_VERSION\")\n// Server Modules\nimplementation(\"cloud.caroline:caroline-server-core:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-server-projects:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-server-users:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-server-crash:$CAROLINE_VERSION\")\nimplementation(\"cloud.caroline:caroline-server-logging:$CAROLINE_VERSION\")\n}\n</code></pre>"},{"location":"development/documentation/","title":"Documentation","text":"<p>Documentation is created with MkDocs using Material for MkDocs. MkDocs is configured with <code>mkdocs.yml</code> and documentation source is stored in the <code>docs</code> folder.</p>"},{"location":"development/documentation/#install-python","title":"Install Python","text":"<p>Download and install the latest version of Python.</p> macOS Windows"},{"location":"development/documentation/#macos","title":"macOS","text":"<p>Using Homebrew</p> <pre><code>brew install python\n</code></pre>"},{"location":"development/documentation/#windows","title":"Windows","text":"<p>Download and install the recommended version from python.org.</p> <p>Or with Chocolatey</p> <pre><code>choco install python\n</code></pre>"},{"location":"development/documentation/#install-mkdocs-and-plugins","title":"Install MkDocs and plugins","text":"<p>Open a new Terminal or Command Prompt window.</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-markdownextradata-plugin\n</code></pre> <p>For more information see the MkDocs Installation Guide and the Material for MkDocs Installation Guide.</p>"},{"location":"development/documentation/#writing-documentation","title":"Writing Documentation","text":"<p>Documentation source files are written in Markdown. For navigation and advanced formatting features, see the MkDocs Writing your docs guide and Material for MkDocs Reference.</p> Variables <p>Some dynamic variables are made available, they can be used with the <code>{{ name }}</code> syntax. Below are the available variables.</p> Name Value version The current release version, for example <code>2.3.5</code> (No <code>v</code> prefix)"},{"location":"development/documentation/#view-docs-locally","title":"View docs locally","text":"<p>To view the docs locally, open a terminal or command prompt and cd into your <code>caroline</code> folder then run</p> <pre><code>mkdocs serve\n</code></pre> <p>Your changes will be served at http://127.0.0.1:8000. After saving changes, the webpage will reload automatically.</p>"},{"location":"development/documentation/#deployment","title":"Deployment","text":"<p>Changes are deployed to docs.caroline.cloud automatically when merged into the <code>main</code> branch.</p>"}]}