/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package guru.zoroark.tegral.openapi.dsl

import guru.zoroark.tegral.core.Buildable
import guru.zoroark.tegral.core.TegralDsl
import io.swagger.v3.oas.models.security.OAuthFlows
import io.swagger.v3.oas.models.security.SecurityScheme

/**
 * DSL for the [security scheme object](https://spec.openapis.org/oas/v3.1.0#security-scheme-object).
 */
@TegralDsl
public interface SecuritySchemeDsl {
    /**
     * The type of the security scheme.
     *
     * You can use the following helper properties that will set the correct type instead:
     *
     * - [httpType]
     * - [apiKeyType]
     * - [oauth2Type]
     * - [openIdConnectType]
     * - [mutualTlsType]
     */
    @TegralDsl
    public var type: SecurityScheme.Type?

    /**
     * A description for security scheme. CommonMark syntax may be used for rich text representation.
     */
    @TegralDsl
    public var description: String?

    /**
     * The name of the header, query or cookie parameter to be used.
     *
     * Only applies to API keys.
     */
    @TegralDsl
    public var name: String?

    /**
     * The location of the API key.
     *
     * Only applies to API keys.
     *
     * You can use the following helper properties that will set the correct location instead:
     *
     * - [inQuery]
     * - [inHeader]
     * - [inCookie]
     */
    @TegralDsl
    public var inLocation: SecurityScheme.In?

    /**
     * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an
     * authorization server, so this information is primarily for documentation purposes.
     *
     * Only applies to HTTP (berare) type schemes.
     */
    @TegralDsl
    public var bearerFormat: String?

    /**
     * The name of the HTTP Authorization scheme to bbe used in the Authorization header as defined in RFC 7235. The
     * values used should be registered in the IANA Authentication Scheme registry.
     */
    @TegralDsl
    public var scheme: String?

    /**
     * OpenID Connect URL to discover OAuth2 configuration values. This must be in the form of a URL. The OpenID Connect
     * standard requires the use of TLS.
     */
    @TegralDsl
    public var openIdConnectUrl: String?

    /**
     * An object containing configuration information for the flow types supported.
     */
    // TODO proper dsl for oauth flows
    @TegralDsl
    public var flows: OAuthFlows?
}

/**
 * Sets the type of this security scheme to HTTP.
 */
public val SecuritySchemeDsl.httpType: Unit
    get() {
        type = SecurityScheme.Type.HTTP
    }

/**
 * Sets the type of this security scheme to API key.
 */
public val SecuritySchemeDsl.apiKeyType: Unit
    get() {
        type = SecurityScheme.Type.APIKEY
    }

/**
 * Sets the type of this security scheme to OAuth 2.
 */
public val SecuritySchemeDsl.oauth2Type: Unit
    get() {
        type = SecurityScheme.Type.OAUTH2
    }

/**
 * Sets the type of this security scheme to OpenID Connect.
 */
public val SecuritySchemeDsl.openIdConnectType: Unit
    get() {
        type = SecurityScheme.Type.OPENIDCONNECT
    }

/**
 * Sets the type of this security scheme to Mutual TLS.
 */
public val SecuritySchemeDsl.mutualTlsType: Unit
    get() {
        type = SecurityScheme.Type.MUTUALTLS
    }

/**
 * Sets the location of this security scheme to be in a cookie.
 */
public val SecuritySchemeDsl.inCookie: Unit
    get() {
        inLocation = SecurityScheme.In.COOKIE
    }

/**
 * Sets the location of this security scheme to be in a header.
 */
public val SecuritySchemeDsl.inHeader: Unit
    get() {
        inLocation = SecurityScheme.In.HEADER
    }

/**
 * Sets the location of this security scheme to be in a query parameter.
 */
public val SecuritySchemeDsl.inQuery: Unit
    get() {
        inLocation = SecurityScheme.In.QUERY
    }

/**
 * Builder for the [security scheme DSL][SecuritySchemeDsl].
 */
public class SecuritySchemeBuilder : SecuritySchemeDsl, Buildable<SecurityScheme> {
    override var type: SecurityScheme.Type? = null
    override var description: String? = null
    override var name: String? = null
    override var inLocation: SecurityScheme.In? = null
    override var bearerFormat: String? = null
    override var openIdConnectUrl: String? = null
    override var scheme: String? = null
    override var flows: OAuthFlows? = null

    override fun build(): SecurityScheme {
        return SecurityScheme().apply {
            type = this@SecuritySchemeBuilder.type
            description = this@SecuritySchemeBuilder.description
            name = this@SecuritySchemeBuilder.name
            `in` = this@SecuritySchemeBuilder.inLocation
            bearerFormat = this@SecuritySchemeBuilder.bearerFormat
            scheme = this@SecuritySchemeBuilder.scheme
            openIdConnectUrl = this@SecuritySchemeBuilder.openIdConnectUrl
            flows = this@SecuritySchemeBuilder.flows
        }
    }
}
