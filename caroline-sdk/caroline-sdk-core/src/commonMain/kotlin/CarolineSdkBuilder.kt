package cloud.caroline.core

import io.ktor.client.*
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers

public class CarolineSdkBuilder internal constructor() {

    /**
     * The primary URL of the Caroline server to target.
     * For an all-in-one instance only this URL is required as all services
     * are exposed from the same domain.
     *
     * @see serviceUrls for advanced deployments with independently hosted services.
     */
    public var serverUrl: String = ""

    /**
     * The required project id generated by the Caroline installation you're targeting.
     */
    public var projectId: String = ""

    /**
     * The required api key generated by the Caroline installation you're targeting.
     */
    public var apiKey: String = ""

    /**
     * An optional [CoroutineDispatcher] to be used by SDK components.
     */
    public var dispatcher: CoroutineDispatcher = Dispatchers.Default

    /**
     * An optional [HttpClient] used as the base client by SDK components.
     */
    public lateinit var httpClient: HttpClient

    /**
     * Advanced deployments of Caroline that put each service behind a distinct URL
     * must provide the subdomain or base path for each service.
     *
     * URL formats should either be `logging.\[serverUrl]` for subdomains or
     * `\[serverUrl]/logging` for a base path.
     *
     * @see CarolineCloudSdk to configure url formats automatically when targeting caroline.cloud
     */
    public val serviceUrls: MutableMap<CarolineSdk.Type, String> = mutableMapOf()

    internal fun build(): CarolineSdk {
        require(serverUrl.isNotBlank()) {
            "CarolineSdk `serverUrl` must be configured"
        }

        require(serverUrl.startsWith("https://") || serverUrl.startsWith("http://")) {
            "CarolineSdk `serverUrl` must start with 'https://' or 'http://' for advanced deployments"
        }

        require(projectId.isNotBlank()) {
            "CarolineSdk `projectId` must be configured"
        }

        require(apiKey.isNotBlank()) {
            "CarolineSdk `apiKey` must be configured"
        }

        serviceUrls.forEach { (type, format) ->
            require(format.contains("[serverUrl]")) {
                "CarolineSdk `serviceUrls` must contain '[serverUrl]' to be formatted with the configured value\n" +
                    "   CarolineSdk { serviceUrls[${type.name}] = \"${type.name.lowercase()}.[serverUrl]\" }"
            }
        }
        val formattedServiceUrls = serviceUrls.mapValues { (_, format) ->
            format.replace("[serverUrl]", serverUrl)
        }

        if (!::httpClient.isInitialized) {
            httpClient = HttpClient()
        }

        return CarolineSdkImpl(serverUrl, projectId, apiKey, formattedServiceUrls, httpClient, dispatcher)
    }
}
